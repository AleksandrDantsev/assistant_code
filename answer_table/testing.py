testing = {
	"v": {
		"ques": "Виды тестирования",
		"result": 
'''
	-Функциональное тестирование: Проверяет, что все функции
	 приложения работают корректно и соответствуют требованиям.

	-Интеграционное тестирование: Проверяет взаимодействие 
	 между различными компонентами системы.

	-Регрессионное тестирование: Проводится после внесения изменений
	 в систему, чтобы убедиться, что эти изменения не повлияли 
	 на работоспособность других функций.

	-Нагрузочное тестирование: Оценивает, как система работает
	 под большой нагрузкой.

	-Тестирование производительности: Измеряет скорость работы
	 системы и загрузку ресурсов.

	-Тестирование безопасности: Проверяет систему на уязвимости
	 и возможность взлома.

	-Ручное тестирование: Тестировщик выполняет проверку вручную, без
	 использования автоматизированных средств.

	-Автоматизированное тестирование: Тесты выполняются автоматически 
	с использованием специальных инструментов.
'''
	},

	"f": {
		"ques": "Fake в unit тестировании",
		"result": 
'''
	В юнит-тестировании fake — это инструмент для создания фиктивных
	данных или объектов, которые имитируют реальное поведение системы,
	но при этом не требуют доступа к внешним ресурсам или базе данных.
	Fake-объекты позволяют быстро создавать тестовые сценарии и изолировать
	тесты от внешних зависимостей, что ускоряет процесс тестирования
	и улучшает его качество.
'''
	},

	"s": {
		"ques": "Stub в unit тестировании",
		"result": 
'''
	В юнит-тестировании stub — это заглушка, которая заменяет реальную
	реализацию метода или интерфейса. Она используется для того,
	чтобы изолировать тестируемый код от зависимостей и упростить
	тестирование. Stub может просто возвращать фиксированное 
	значение или выполнять некоторые заранее определенные действия.
'''
	},

	"m": {
		"ques": "Mock в unit тестировании?",
		"result": 
'''
	В юнит-тестировании mock — это объект, который имитирует 
	поведение другого объекта. Он позволяет тестировать код в изоляции,
	не затрагивая реальные зависимости. Mock используется для контроля
	того, какие методы будут вызваны и какие данные будут возвращены.
	Это позволяет написать более точные и надежные тесты.
'''
	},

	"b": {
		"ques": "White/Black/Grey Box-тестирование?",
		"result": 
'''
	-White box testing - это метод тестирования программного обеспечения,
	 при котором тестировщик имеет доступ к исходному коду программы. 
	 Этот вид тестирования позволяет обнаружить максимальное количество 
	 ошибок, так как тестировщик может исследовать внутреннюю структуру 
	 программы и использовать знания о ее работе для создания тестов.

	-Black box testing - метод тестирования, при котором тестировщику 
	неизвестны детали реализации системы. Тестировщик имеет доступ только 
	к функциональности системы, описанной в требованиях или технической 
	документации. Этот вид тестирования помогает проверить соответствие 
	системы требованиям и обнаружить ошибки в интерфейсе пользователя.

	-Grey box testing - промежуточный вид тестирования между white box 
	и black box. Тестировщику доступны некоторые детали реализации системы,
	например, структура программы или алгоритмы работы отдельных компонентов. 
	Это позволяет создать более точные и эффективные тесты, учитывая знания 
	о внутреннем устройстве системы.
'''
	},

	"g": {
		"ques": "Что такое Quality Gates",
		"result": 
'''
	Quality gates — это механизмы, которые определяют критерии качества
	для сборки или итерации, и только если сборка соответствует этим критериям,
	она может быть объединена в основную ветку разработки. Это помогает 
	гарантировать, что в основную ветку не попадут некачественные изменения, 
	которые могут привести к сбоям или проблемам в работе продукта. Quality 
	gates могут включать такие критерии, как количество пройденных тестов, 
	покрытие кода тестами, отсутствие серьезных дефектов и т.д.
'''
	},

	"t": {
		"ques": "Разница между TDD и BDD",
		"result": 
'''
	-TDD (Test-Driven Development) - это подход к разработке программного обеспечения,
	основанный на написании тестов до написания кода. Это позволяет гарантировать,
	что код, который мы пишем, соответствует нашим требованиям и ожиданиям.

	-BDD (Behavior-Driven Development) - это метод разработки программного обеспечения,
	который фокусируется на описании того, как система должна работать, а не 
	на том, как она реализована. BDD использует сценарии, называемые “тестами”, 
	которые описывают поведение системы. Эти сценарии могут быть написаны на любом
	языке, но обычно используются языки, такие как Gherkin или Cucumber.
'''
	},

	"u": {
		"ques": "UI-тестирование",
		"result": 
'''
	UI-тестирование (User Interface Testing) - это процесс тестирования визуального
	интерфейса приложения с целью проверки его функциональности, удобства
	использования и соответствия требованиям. Оно включает в себя тестирование
	различных элементов интерфейса, таких как кнопки, ссылки, формы, поля ввода,
	меню и другие элементы.

	Подходы к UI-тестированию включают функциональное тестирование, интеграционное
	тестирование, регрессионное тестирование, нагрузочное тестирование, 
	тестирование производительности и тестирование безопасности. Каждый из
	этих подходов имеет свои особенности и методы выполнения, но все они направлены 
	на обеспечение качества и надежности приложения.
'''
	},

	"e": {
		"ques": "Как можно оценить качество тестирования",
		"result": 
'''
	Качество тестирования можно оценить по нескольким параметрам:

	-Процент покрытых тестами модулей и функций - чем выше этот процент, 
	тем лучше покрытие тестами и тем меньше вероятность, что в не 
	покрытом тестами коде есть ошибки.

	-Количество обнаруженных ошибок - чем больше ошибок обнаружено, тем 
	выше качество тестирования.

	-Время, затраченное на тестирование - чем меньше времени затрачено 
	на тестирование, тем быстрее проект движется к завершению и тем меньше 
	вероятность появления новых ошибок.

	-Качество отчетов о покрытии тестами - отчеты должны быть полными, 
	точными и понятными для всех членов команды.

	-Оценка удовлетворенности пользователей - пользователи должны быть довольны
	работой приложения и не должны испытывать проблем или неудобств 
	при его использовании.
'''
	},

	"i": {
		"ques": "Принцип FIRST в тестировании",
		"result": 
'''
	Принцип FIRST - это принцип тестирования, который гласит, что 
	при обнаружении ошибки необходимо как можно быстрее ее изолировать
	и устранить. Этот принцип помогает сократить время на поиск и 
	исправление ошибок, а также снижает вероятность появления новых дефектов.
'''
	},

}


