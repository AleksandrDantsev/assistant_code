methodology = {
	"i": {
		"ques": "Что такое бэм?",
		"result": 
'''
	Компонентный подход к веб-разработке. В его основе лежит принцип
	разделения интерфейса на независимые блоки. Он позволяет легко и
	быстро разрабатывать интерфейсы любой сложности и повторно использовать
	существующий код.

	Методология верстки БЭМ решает эту проблему:

	-все компоненты и их составляющие получают уникальные имена;
	-иерархия связей внутри блоков становится очевидной;
	-при изменении стилей отдельных классов не нужно просматривать всю структуру проекта.

	Благодаря методологии составные блоки страницы становятся изолированными, 
	стиль элементов одного блока не может повлиять на другой. Единственный 
	недостаток подхода — длинные имена классов. Это увеличивает и объем кода, 
	и время на его написание.

	Эффективность БЭМ-верстки достигается благодаря разделению кода:

	-на независимые блоки;
	-элементы (дочерние компоненты) блока;
	-модификаторы блоков и элементов.
'''
	},

	"e": {
		"ques": "Что такое БЭМ-сущность?",
		"result": 
'''
	БЭМ-сущностями называются блоки, элементы и модификаторы.

	Блок — логически и функционально независимый компонент страницы: 
		меню, боковая панель, карусель, шапка сайта и так далее. 
		Блок включает в себя шаблоны (Pug, Handlebars) и CSS-стили, 
		скрипты JavaScript, документацию в формате XML или Markdown, 
		другие необходимые для реализации технологии.

	Независимость блоков позволяет свободно перемещать их в пределах страницы 
	и всего проекта. Составные части блока, например формы авторизации и 
	поиска, можно поменять местами: они будут корректно работать и сохранят 
	внешний вид. Внесение изменений в CSS- или JavaScript-скрипты форм не потребуется

	Элемент — неотделимая составная часть блока. Особенности элементов:
		-они не существуют и не используются вне блока;
		-принадлежат только одному блоку;
		-могут вкладываться друг в друга.

	Модификатор — это сущность, которая определяет внешний вид, состояние и 
	поведение элемента или блока. Один и тот же блок, например меню, будет 
	выглядеть по-разному в зависимости от применяемых модификаторов.
'''
	},
	
	"p": {
		"ques": "Принципы",
		"result": 
'''
	Помимо SOLID, есть еще несколько принципов, которые следует учитывать при разработке 
	программного обеспечения:

	-KISS (Keep It Simple, Stupid) - принцип, который гласит, что решение должно быть 
	простым и понятным.
		-не имеет смысла беспредельно увеличивать уровень абстракции, надо уметь остановиться
		-не стоит подключать огромную библиотеку, если вам от неё нужна лишь пара функций
		-декомпозиция чего‑то сложного на простые составляющие — это архитектурно верный 
		подход (тут KISS перекликается с DRY)
		-абсолютная математическая точность или предельная детализация нужны не всегда 

	-YAGNI (You Aren’t Gonna Need It) - принцип, согласно которому не следует добавлять 
	новые функции, если они не нужны прямо сейчас.

	-DRY (Don’t Repeat Yourself) - принцип, который призывает избегать дублирования кода 
	и использовать общие решения для схожих задач.

	-DIP (Dependency Inversion Principle) - принцип инверсии зависимостей, который гласит,
	что высокоуровневые модули не должны зависеть от низкоуровневых.

	-LSP (Liskov Substitution Principle) - принцип подстановки Лискова, который говорит о 
	том, что объекты в иерархии наследования должны быть заменяемы объектами более низкого
	уровня без изменения поведения системы.
'''
	},
}
				
