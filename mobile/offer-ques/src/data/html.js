const html = {

	"i": {
		"ques": "Что такое HTML",
		"result": 
`
	HTML (Hyper Text Markup Language) - это язык разметки гипертекста, 
	используемый для создания веб-страниц. Он определяет структуру веб-страницы, 
	размещая текст, изображения и другие элементы на странице. С помощью HTML 
	можно создать заголовки, абзацы, списки, таблицы и многие другие элементы. 
	Кроме того, HTML позволяет добавлять ссылки на другие веб-страницы или ресурсы, 
	такие как изображения или видео. Таким образом, HTML является основным языком, 
	используемым для создания веб-сайтов и веб-приложений.
`
	},

	"sl": {
		"ques": "Что такое HTML-элемент? Какова его структура?",
		"result": 
`
	HTML-элемент - это структурная единица HTML-документа. Он представляет собой контейнер,
	который может содержать другие элементы, текст, изображения и т. д. Структура 
	HTML-элемента включает следующие атрибуты:

	-Имя - это строка, которая идентифицирует элемент. Например, <h1> обозначает 
	заголовок первого уровня.

	-Атрибуты - дополнительные параметры, которые могут быть использованы для 
	настройки элемента. Например, тег <img> может иметь атрибут src, указывающий 
	на URL изображения.

	-Содержание - это текст или другие элементы, которые находятся внутри 
	элемента. Например, элемент <p> содержит текст абзаца.

	Все эти элементы объединяются для создания структуры веб-страницы.
`
	},

	"t": {
		"ques": "Типы верстки",
		"result": 
`
	1.Фиксированная - все элементы на странице жесткои зафиксированы 
	статическими размерами,	не меняют свой размер при изменении окна

	2.Резиновая - блоки меняют свой размер в зависимости от размера экрана,
	без перестроения элементов

	3.Адаптивная - блоки меняют свой размер и расположение при достижении 
	определенного размера экрана, но не тянуться при ресайзе окна

	4.Отзывчивая - совмещает в себе резиновую и адаптивную верстку
`
	},

	"a": {
		"ques": "Что такое атрибуты в HTML",
		"result": 
`
	Атрибуты в HTML - это дополнительные параметры, которые можно использовать 
	для настройки элементов. Они указываются в открывающем теге элемента, и их 
	значения заключаются в двойные кавычки. Например:

	Атрибуты могут использоваться для определения размера, положения, стиля и 
	других свойств элементов. Они также могут быть использованы для добавления 
	дополнительной информации о содержимом элемента, такой как заголовок или 
	альтернативный текст для изображений.
`
	},

	"g": {
		"ques": "Глобальные атрибуты есть в HTML",
		"result": 
`
	В HTML есть несколько глобальных атрибутов, которые могут использоваться 
	в любом элементе. Вот некоторые из них:

	lang - указывает язык содержимого элемента.

	dir - определяет направление текста (ltr или rtl).

	accesskey - определяет клавишу для получения доступа к элементу (обычно 
	при нажатии Alt + указанная клавиша).

	tabindex - определяет порядок обхода элементов с помощью Tab.

	title - содержит текст всплывающей подсказки при наведении курсора на элемент.

	Это только некоторые из доступных глобальных атрибутов. Полный список 
	можно найти в спецификации HTML.
`
	},

	"k": {
		"ques": "Что такое категории контента в HTML5",
		"result": 
`
	В HTML5 существует несколько категорий контента, которые определяют, как 
	содержимое должно быть отображено на экране. Некоторые из них включают:

	-Flow content: Это основная категория контента, которая включает элементы, 
	такие как теги <p>, <div>, и <span>. Эти элементы могут содержать другие 
	элементы или текст.
	-Phrasing content: Эта категория включает элементы, которые являются частью 
	основного контента, такие как заголовки, списки и таблицы.
	-Embedded content: Эта категория включает медиа-элементы, такие как видео
	и аудио, которые встраиваются в страницу.
	-Interactive content: Эта категория включает интерактивные элементы, такие 
	как кнопки и формы, которые позволяют пользователю взаимодействовать с 
	веб-страницей.

	Каждая категория имеет свои собственные атрибуты и стили, которые определяют, как контент отображается на экране.
`
	},

	"d": {
		"ques": "Что такое doctype? И для чего он используется",
		"result": 
`
	Doctype - это декларация типа документа, которая указывает, какой версией 
	HTML или XHTML является документ. Он используется для того, чтобы сообщить 
	браузеру, какую версию HTML или XHTML следует использовать для отображения 
	документа. Это также помогает обеспечить правильное отображение документа и 
	предотвращает появление ошибок, связанных с несовместимостью версий.
`
	},

	"st": {
		"ques": "Базовая структуру HTML-страницы",
		"result": 
`
	Базовая структура HTML-страницы обычно включает в себя следующие элементы:
	<!DOCTYPE html> - этот тег указывает тип документа и версию HTML.
	<html> - этот тег является корневым тегом для HTML-документа и включает все остальные теги.
	<head> - этот раздел содержит метаданные и инструкции для браузера.
	  -<title> - этот тег содержит заголовок страницы, который отображается в строке 
	заголовка браузера.
	  -meta - этот тег используется для указания метаинформации, такой как описание 
	страницы, ключевые слова и т.д.
	  -<link rel="stylesheet" href="style.css"> - этот тег подключает внешний CSS-файл, 
	который содержит стили для страницы.
	<body> - этот раздел содержит основное содержимое страницы.
	  -header - этот элемент содержит верхний колонтитул страницы, такой как логотип 
	  или навигационное меню.
`
	},

	"v": {
		"ques": "Что такое валидация? Типы проверок HTML документа",
		"result": 
`
	Валидация - это процесс проверки правильности и соответствия стандартам HTML-кода.

	Основные типы проверок:

	-Проверка на соответствие стандартам W3C (World Wide Web Consortium).
	-Проверка на наличие ошибок в коде (например, незакрытые теги, дублирующиеся 
	идентификаторы и т.д.).
	-Проверка на совместимость с различными браузерами и устройствами.
	-Проверка на безопасность (отсутствие уязвимостей и кросс-браузерных проблем).
`
	},

	"s": {
		"ques": "Семантические теги",
		"result": 
`
	Семантика - это смысл и значение элементов HTML. Семантические теги - это теги, которые 
	имеют конкретное значение и используются для описания структуры и содержания веб-страницы

`
	},

	"f": {
		"ques": "Как семантически правильно сверстать картинку с подписью",
		"result": 
`
	<figure>
        <img src="/path/to/image.jpg" alt="Image description">
        <figcaption>Figure caption</figcaption>
    </figure>
`
	},

	"l": {
		"ques": "Типы списков в HTML",
		"result": 
`
	В HTML существует несколько типов списков:

	-неупорядоченные списки (unordered lists) - используются для перечисления 
	пунктов, не имеющих определенного порядка. Для создания такого списка 
	используется тег <ul>;

	-упорядоченные списки (ordered lists) - используются для нумерации пунктов. 
	Тег для создания такого списка - <ol>;

	-определения списка (definition lists) - используются для создания списка, 
	каждый элемент которого состоит из двух частей: термина и его определения. 
	Тег для такого списка - <dl>.
`
	},

	"da": {
		"ques": "Разница между <script>, <script async> и <script defer>",
		"result": 
`
	Разница между тегами <script>, <script async> и <script defer> заключается в том,
	как браузер обрабатывает код, содержащийся в этих тегах.

	Тег <script> указывает браузеру на необходимость загрузить и выполнить указанный 
	скрипт. Браузер загружает скрипт и выполняет его сразу же, как только он полностью 
	загружен. Это означает, что если скрипт большой и занимает много времени для загрузки, 
	это может замедлить загрузку остальной части страницы.

	Тег <script async> указывает браузеру, что скрипт должен загружаться асинхронно, 
	т.е. браузер начинает загрузку скрипта сразу же, но не ждет, пока он полностью 
	загрузится, прежде чем продолжить загрузку и выполнение остальной части страницы.

	Это может ускорить загрузку страницы, поскольку браузер может начать загрузку других 
	ресурсов, пока скрипт еще загружается.

	Однако, этот подход имеет недостаток: поскольку скрипт загружается асинхронно, он 
	может начать выполняться до того, как он полностью загружен, что может привести к
	ошибкам и неправильному поведению.
`
	},

	"dl": {
		"ques": "Тег <datalist>",
		"result": 
`

	Элемент <datalist> используется для создания выпадающего списка с предварительно выбранными значениями. 
	Он позволяет пользователю выбрать значение из списка, а затем отправить его вместе с формой.

	<label for="country">Country:</label>
	<input list="countries" id="country" name="country">
	<datalist id="countries">
	  <option value="Afghanistan">
	  <option value="Albania">
	  <option value="Algeria">
	  ...
	</datalist>
`
	},

	"z": {
		"ques": "<link> для подключения CSS внутри тэга <head>, а <script> JS ставить перед закрывающимся тэгом </body>",
		"result": 
`

	Подключение CSS внутри тега <head> является хорошей практикой, так как это 
	позволяет браузеру начать парсинг и применение стилей сразу после загрузки 
	документа. Это ускоряет процесс визуализации страницы и делает его более 
	плавным для пользователя.

	С другой стороны, подключение JS перед закрывающимся тегом </body> позволяет 
	загрузить и выполнить скрипт после загрузки всего содержимого страницы. Это 
	помогает избежать проблем с блокировкой рендеринга и улучшить производительность, 
	так как браузер может продолжать загрузку и обработку страницы, пока JS еще выполняется.
`
	},

	"m": {
		"ques": "Что такое мета-тэги",
		"result": 
`

	Мета-теги - это специальные HTML-теги, которые используются для предоставления 
	информации о веб-странице или сайте. Они обычно располагаются в разделе head документа 
	и не отображаются в видимой части страницы. Некоторые распространенные примеры 
	мета-тегов включают:

	-Title - используется для определения заголовка веб-страницы, который отображается 
	в строке заголовка браузера и поисковых систем.

	-Description - используется для описания содержания страницы, которое может быть 
	использовано поисковыми системами при создании краткого описания страницы в результатах поиска.

	-Keywords - устаревший тег, который использовался для указания списка ключевых слов, 
	связанных с веб-страницей. В настоящее время поисковые системы редко используют этот тег.

	-Author - тег, используемый для указания автора или создателей веб-страницы.

	-Robots - тег для указания правил индексации страницы поисковыми роботами.
`
	},

	"w": {
		"ques": "meta-теге с name=viewport",
		"result": 
`
	Meta-тег viewport используется для указания размеров и ориентации экрана мобильного 
	устройства или планшета, на котором отображается веб-страница. Это позволяет 
	веб-приложению адаптировать свой интерфейс для лучшего отображения на различных устройствах.

	Вот пример использования meta-тега viewport:
	<meta name="viewport" content="width=device-width, initial-scale=1.0">

	Этот тег говорит браузеру устройства, что ширина веб-страницы должна быть равна ширине 
	экрана устройства, и что масштаб страницы должен быть установлен на 100%.
`
	},

	"cv": {
		"ques": "Что такое элемент <canvas>",
		"result": 
`

	<canvas> - векторный

	Элемент <canvas> используется для рисования 2D графики на веб-страницах. 
	С его помощью можно создавать анимацию, игры, визуализировать данные и многое 
	другое. На канве можно рисовать линии, фигуры, текст, а также загружать изображения 
	и работать с ними. Данные на канве можно обрабатывать с помощью JavaScript.
`
	},

	"av": {
		"ques": "Свойство valueAsNumber",
		"result": 
`

	<canvas> - векторный

	valueAsNumber - это свойство, которое позволяет получить числовое значение
	элемента input. Оно может быть полезно, если вы хотите работать с введенными 
	данными как с числами, а не как со строками. Например, если у вас есть поле 
	для ввода числа, вы можете получить его значение с помощью valueAsNumber и 
	выполнить какие-то операции над ним.

	<input type="number" valueAsNumber>
`
	},

	"tr": {
		"ques": "Что такое атрибут target",
		"result": 
`

	Атрибут target используется для указания окна или фрейма, в который должна 
	загружаться страница при выполнении ссылки.

	Он может принимать следующие значения:

	-_blank - открыть ссылку в новом окне
	-_self - загрузить ссылку в текущем окне
	-_parent - загрузить ссылку в родительском окне, если оно есть
	-_top - загрузить ссылку в верхнем уровне документа, если возможно
	-имя фрейма - загрузить ссылку в указанном фрейме
`
	},

	"ac": {
		"ques": "ApplicationCache в HTML5",
		"result": 
`

	Application Cache (кэш приложений) в HTML5 - это механизм кэширования,
	который позволяет сохранять веб-страницы и ресурсы на компьютере пользователя
	для последующего использования без подключения к интернету. Он позволяет 
	приложениям работать без доступа в интернет, а также сокращает время 
	загрузки при следующем посещении сайта.

	<!DOCTYPE html>

	<html manifest="cache.appcache">
	<head>
	    <title>HTML5 AppCache Demo</title>
	</head>
`
	},

	"sc": {
		"ques": "Что такое srcset",
		"result": 
`

	SRCset - это атрибут тега <img>, который позволяет определить несколько 
	источников изображения для разных разрешений экрана. Он предоставляет 
	набор ресурсов разного размера, и браузер выбирает наиболее подходящий 
	ресурс в зависимости от текущего размера окна просмотра. Это позволяет 
	оптимизировать загрузку изображений и улучшить производительность веб-страницы.

	Работает SRCset следующим образом:
	1.Браузер считывает атрибут srcset и определяет размеры изображений, 
	указанных в списке.

	2.Браузер вычисляет ширину окна просмотра и сравнивает ее с 
	указанными размерами изображений.

	3.Браузер выбирает тот ресурс, ширина которого ближе всего к 
	ширине окна просмотра, и загружает его.

	4.Если подходящего ресурса не найдено, браузер загружает ресурс 
	с указанным src атрибутом (если такой есть).

	5.Таким образом, SRCset позволяет создавать адаптивные изображения, 
	которые автоматически изменяются в зависимости от размера окна браузера, 
	улучшая опыт пользователя и оптимизируя загрузку ресурсов.
`
	},

	"nv": {
		"ques": "Как семантически верно сверстать навигационное меню",
		"result": 
`
	<nav>
	  <ul>
	    <li><a href="#">Пункт меню 1</a></li>
	    <li><a href="#">Пункт меню 2</a></li>
	    <li><a href="#">Пункт меню 3</a></li>
	  </ul>
	</nav>
`
	},

	"fr": {
		"ques": "Что такое <iframe>",
		"result": 
`
	Если кратко, то iframe — это HTML-тег, который позволяет встроить 
	один документ в другой. Например, с его помощью можно вставить на 
	сайт видео с YouTube или стороннюю веб-страницу.
`
	},

	"sb": {
		"ques": "Для чего используются тэги <sub> и <sup>",
		"result": 
`
	Тэг <sub> используется для создания нижнего индекса (например, в химических формулах). 

	Тэг <sup> используется для создания верхнего индекса (например, степени или порядковые
	 числительные).
`
	},

	"hd": {
		"ques": "Как можно скрыть элемент разметки не используя CSS и JS",
		"result": 
`
	Можно использовать атрибут hidden в HTML:

	<div hidden> скрытый элемент </div>
`
	},


	"mp": {
		"ques": "<meter> и <progress> html",
		"result": 
`
	-Тег <meter> используется для отображения относительного значения или состояния.
	-Тег <progress> используется для индикации прогресса выполнения задачи.

	<meter id="speedometer" min="0" max="100" value="75">
  		75%
	</meter>

	<progress max="100">
  		<progress-bar style="width:20%;" role="progressbar" aria-valuenow="20" 
  		aria-valuemin="0" aria-valuemax="100"></progress-bar>
	</progress>
`
	},

	"op": {
		"ques": "Как можно сгруппировать опции внутри тэга <select>",
		"result": 
`
	<select>
	  <optgroup label="Группа 1">
	    <option value="1">Опция 1</option>
	    <option value="2">Опция 2</option>
	  </optgroup>
	  <optgroup label="Группа 2">
	    <option value="3">Опция 3</option>
	    <option value="4">Опция 4</option>
	  </optgroup>
	</select>
`
	},


	"ek": {
		"ques": "Для чего используется атрибут enterkeyhint",
		"result": 
`
	Атрибут enterkeyhint используется для указания того, какой тип ввода 
	ожидается после нажатия клавиши Enter. Возможные значения:

	-enter - ожидается ввод текста.
	-done - ожидается завершение ввода.
	-next - ожидается переход к следующему полю ввода.
	-go - ожидается выполнение действия “перейти”.
	-search - ожидается запуск поиска.
	-send - ожидается отправка формы.

	Значение по умолчанию зависит от браузера и операционной системы.
`
	},

	"nl": {
		"ques": " Для чего используют атрибут novalidate",
		"result": 
`
	Атрибут novalidate используется для отключения валидации формы по 
	умолчанию. Валидация формы - это процесс проверки правильности введенных 
	данных, чтобы убедиться, что они соответствуют требованиям. Отключение 
	валидации может быть полезно, если вы хотите создать форму, которая будет 
	отправлять данные без проверки, или если вы хотите настроить свою собственную 
	валидацию.
`
	},

	"im": {
		"ques": "Для чего используют атрибут inputmode",
		"result": 
`
	Атрибут inputmode используется для определения того, какой тип данных 
	ожидается от пользователя. Он может иметь следующие значения:

	-text - обычный текст;
	-tel - номер телефона;
	-url - URL;
	-email - адрес электронной почты;
	-decimal - число с десятичной точкой;
	-search - поисковый запрос.
`
	},

	"pt": {
		"ques": " Для чего используется атрибут pattern",
		"result": 
`
	Атрибут pattern используется для определения регулярного выражения, 
	которое будет использоваться для проверки введённого пользователем значения 
	атрибуту data-pattern. Если значение не соответствует регулярному выражению, 
	то значение считается недействительным.

	<input type="text" id="fname" name="fname" pattern="[a-zA-Zа-яА-ЯёЁ]+">

	<!-- здесь мы проверяем, состоит ли введённое значение из букв латинского и русского алфавита -->
`
	},

	"pf": {
		"ques": "Способы улучшения производительности веб-страницы при использовании HTML",
		"result": 
`
	-Минимизация HTML-кода: Удалите все ненужные пробелы, переносы строк и комментарии,
	 которые не добавляют ценности вашему коду.

	-Правильный выбор элементов: Используйте только те элементы, которые действительно 
	необходимы для вашего контента. Избегайте использования ненужных элементов, так как 
	это может увеличить размер и сложность вашего кода.

	-Кэширование ресурсов: Кэшируйте изображения, CSS и JavaScript файлы, чтобы уменьшить 
	количество HTTP-запросов и улучшить производительность вашей веб-страницы.

	-Сжатие ресурсов: Сжимайте CSS, JavaScript и HTML файлы для уменьшения их размера и 
	ускорения загрузки.

	-Оптимизация изображений: Используйте форматы изображений, которые поддерживают 
	сжатие без потери качества (например, JPEG), а также оптимизируйте размеры и разрешение 
	изображений для разных устройств и разрешений экрана.

	-Использование атрибута defer для внешних скриптов: Это позволяет браузеру загружать и 
	выполнять скрипт только тогда, когда это необходимо, что может уменьшить время загрузки страницы.

	-Использование асинхронной загрузки для внешних скриптов: Позволяет загружать скрипты 
	параллельно с загрузкой основного HTML-документа, что может ускорить загрузку страницы.
`
	},


	"sa": {
		"ques": "Основные атрибуты HTML-форм? Как они влияют на отправку данных с веб-страницы",
		"result": 
`
	Основные атрибуты HTML форм:

	action - определяет URL, на который будет отправлен запрос после отправки формы.

	method - указывает метод отправки данных (обычно GET или POST).

	enctype - указывает тип кодирования данных, отправляемых на сервер 
	(обычно application/x-www-form-urlencoded или multipart/form-data).

	target - задает имя фрейма или окна, в которое будет загружаться результат отправки
	формы. Если этот атрибут не указан, то результат будет загружен в текущее окно.

	accept-charset - указывает кодировку символов, используемую для 
	отправки данных формы.

	autocomplete - используется для управления автозаполнением полей 
	формы (вкл./выкл.).

	required - если этот атрибут присутствует, поле формы становится 
	обязательным для заполнения.

	name - имя поля формы, которое используется для идентификации 
	его на сервере.

	value - значение поля формы по умолчанию.

	multiple - используется для множественного выбора в 
	списках и чекбоксах.

	disabled - отключает поле формы.
`
	},
}


export { html }