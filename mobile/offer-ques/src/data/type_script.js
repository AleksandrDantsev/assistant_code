const type_script = {

	"i": {
		"ques": "Что такое TypeScript",
		"result": 
`
	TypeScript - это язык программирования, разработанный компанией Microsoft.
	Он является надмножеством языка JavaScript и добавляет к нему статическую 
	типизацию, конструкции, упрощающие написание кода, и другие возможности. 
	TypeScript программы можно скомпилировать в обычный JavaScript, который 
	может быть выполнен в браузере или на сервере. Это позволяет использовать 
	преимущества TypeScript, не требуя изменений в коде, который использует 
	JavaScript.
`
	},

	"s": {
		"ques": "Назовите особенности TypeScript",
		"result": 
`
	-Статическая типизация. TypeScript обеспечивает строгую проверку типов на 
	этапе компиляции. Это помогает находить ошибки в коде до его выполнения.

	-Generics. Generics позволяют создать обобщенный код, который работает с различными 
	типами данных без необходимости создавать отдельные версии функции для каждого типа.

	-Interfaces. TypeScript поддерживает интерфейсы, которые позволяют определить 
	абстрактный тип данных и использовать его в коде.

	-Modules. TypeScript поддерживает модули, что позволяет разбивать код на 
	отдельные блоки и управлять зависимостями между ними.

	-Type inference. TypeScript может автоматически выводить типы переменных и 
	параметров функции на основе их значений.

	-Type guards. Type guards позволяют проверить тип переменной во время выполнения 
	кода и выполнить разные блоки кода в зависимости от типа переменной.

	-Mapped types. Mapped types позволяют создавать новый тип на основе существующего, 
	изменяя его свойства или добавляя новые свойства.

	-Conditional types. Conditional types позволяют создать тип, который зависит от 
	условия, например от значения другой переменной или от результата выражения.

	-Union and intersection types. Union и intersection types позволяют объединять 
	или пересекать несколько типов, чтобы создать новый тип.
`
	},

	"p": {
		"ques": "Плюсы использования TypeScript?",
		"result": 
`
	-Более строгий контроль типов.
	-Более читаемый код.
	-Совместимость с JavaScript.
	-Поддерживается многими инструментами.
	-Может улучшить производительность.
`
	},

	"t": {
		"ques": "Типы в TypeScript?",
		"result": 
`
	TypeScript поддерживает различные типы данных, включая:

	-Строки (string)
	-Числа (number)
	-Логические значения (boolean)
	-Объекты (object)
	-Массивы (array)
	-Перечисления (enum)
	-Псевдонимы типов (type aliases)
	-Интерфейсы (interfaces)
	-Классы (classes)
	-Обобщенные типы (generics)
`
	},

	"d": {
		"ques": "Декораторы",
		"result": 
`
	TypeScript поддерживает различные типы данных, включая:
	
	Декораторы в TypeScript позволяют добавлять дополнительные метаданные к 
	классам, методам, свойствам и параметрам. Они позволяют изменять поведение 
	класса, метода, свойства или параметра без необходимости изменения исходного 
	кода. Например, декоратор может использоваться для добавления логирования или 
	для изменения поведения метода при определенных условиях.
`
	},

	"f": {
		"ques": "Что такое перегрузка функций",
		"result": 
`
	Перегрузка функций - это возможность определить несколько функций с одним 
	и тем же именем, но с разными наборами параметров и возвращаемыми типами. 
	В этом случае, выбор конкретной функции осуществляется на основе типов 
	аргументов, передаваемых при вызове функции.

	function print(value: string): void;
	function print(value: number): void;
	function print(value: any): void {
	    console.log(value);
	}

	print("Hello, World!"); // Выведет "Hello, World!"
	print(42); // Выведет 42
	print(true); // Выведет true

	В этом примере определены три функции print с разной сигнатурой, но все они 
	принимают один аргумент и не возвращают значение. Когда вызывается функция print, 
	TypeScript выбирает наиболее подходящую из перегруженных функций на основе 
	типа аргумента.
`
	},

	"r": {
		"ques": "Поддерживает ли TypeScript перегрузку функций",
		"result": 
`
	Да, TypeScript поддерживает перегрузку функций. Вы можете определить несколько 
	функций с одним и тем же именем, но с разными наборами параметров. TypeScript 
	будет выбирать наиболее подходящую функцию на основе типов аргументов.
`
	},

	"o": {
		"ques": "Разница между type и  interface в typescript",
		"result": 
`
	Типы в TypeScript более гибкие и могут определять примитивы, пересечения, 
	объединения, кортежи или различные типы данных, а интерфейсы используются 
	для описания формы объекта. Типы используют ключевое слово type для создания 
	нового типа, а интерфейсы — ключевое слово interface для объявления интерфейса.
`
	},

	"k": {
		"ques": "Что такое директивы с тремя наклонными чертами (Triple-Slash Directives), их типы",
		"result": 
`
	Директивы с тремя наклонными чертами используются в TypeScript для того, чтобы пометить 
	какие-то части кода как комментарии или для указания того, что код является временным 
	и его не нужно компилировать.

	Существует два типа директив с тремя наклонными чертами:

	// / - используются для комментариев в коде, которые не будут компилироваться;
	// /** - используются для указания временных участков кода, которые также не будут 
	компилироваться.

	Эти директивы очень полезны для временного отключения частей кода во время 
	разработки, чтобы не нарушать его работу.
`
	},

	"w": {
		"ques": " Что такое внешние объявления переменных (ambient declaration) ",
		"result": 
`
	Внешние объявления переменных используются для объявления глобальных переменных 
	или функций, которые могут использоваться в коде, но не обязательно должны 
	быть определены в текущем файле. Это позволяет использовать общие API без 
	необходимости импортировать все определения в каждый файл. Например:

	declare var window: any;

	Это объявление говорит TypeScript, что переменная window существует в глобальной 
	области видимости и имеет тип any.
`
	},

	"a": {
		"ques": "Абстрактный класс в TypeScript",
		"result": 
`
	Абстрактный класс в TypeScript используется для определения общего поведения 
	и свойств для группы связанных классов. Он может содержать методы с реализацией 
	по умолчанию и может быть унаследован только абстрактными классами или интерфейсами. 
	Абстрактные классы позволяют определять общий интерфейс для классов, которые 
	имеют общую структуру и поведение, но могут отличаться в некоторых деталях. Это 
	помогает уменьшить дублирование кода и улучшает модульность и расширяемость кода.


	abstract class Animal {
	    public name: string;

	    constructor(name: string) {
	        this.name = name;
	    }

	    public abstract bark(): void;
	    public abstract walk(): void;
	}

	class Dog extends Animal {
	    bark() {
	        console.log(Woof!);
	    }
	    walk() {
	        console.log(Walking...);
	    }
	}

	class Cat extends Animal {
	    bark() {
	        console.log(Meow!);
	    }
	    walk() {
	        console.log(Tiptoeing...);
	    }
	}

	let dog = new Dog("Rex");
	let cat = new Cat("Sylvester");
	dog.bark();
	dog.walk();
	cat.bark();
	cat.walk();

	В этом примере у нас есть абстрактный класс Animal, который определяет свойства и 
	методы, общие для всех животных. От него наследуются классы Dog и Cat, которые 
	предоставляют свою реализацию методов bark и walk
`
	},

	"q": {
		"ques": " Какие элементы ООП поддерживаются в TypeScript",
		"result": 
`
	TypeScript поддерживает все основные элементы объектно-ориентированного программирования, включая:

	-Классы: Вы можете определять классы с свойствами и методами, а также наследовать 
	от других классов.

	-Интерфейсы: Интерфейсы позволяют определять наборы свойств и методов, которые должны 
	быть реализованы классами, которые их используют.

	-Перегрузка операторов: TypeScript позволяет перегрузить большинство операторов, 
	включая арифметические, логические и операторы присваивания.

	-Приведение типов (type casting): TypeScript позволяет явно приводить переменные к 
	другим типам с помощью оператора “as”.

	-Полиморфизм: TypeScript поддерживает полиморфизм через наследование и 
	реализацию интерфейсов.

	-Статическая типизация: TypeScript обеспечивает строгую проверку типов на этапе 
	компиляции, что помогает предотвратить ошибки времени выполнения.
`
	},

	"m": {
		"ques": "Модификаторы доступа в TypeScript",
		"result": 
`
	Да, TypeScript поддерживает модификаторы доступа. Вы можете использовать 
	ключевые слова: 
	-public 
	-private 
	-protected 

	Используются для управления доступом к членам класса. 
	Public члены доступны из любого места, 
	private члены могут быть доступны только из текущего класса, 
	а protected члены могут быть доступны из текущего класса и его потомков.
`
	},

	"e": {
		"ques": "Internal Module и External Module",
		"result": 
`
	Разница между внутренним и внешним модулями в TypeScript касается того, 
	как они обрабатываются во время компиляции и как они подключаются к вашему проекту.

	Внутренний модуль (Internal Module):

	Внутренним модулем называется модуль, который компилируется вместе с вашим проектом. 
	Такой модуль доступен только в рамках вашего проекта и не может быть импортирован 
	или экспортирован из него. Внутренние модули обычно используются для организации 
	кода внутри вашего проекта и для сокрытия деталей реализации от пользователей вашего кода.


	Внешний модуль (External Module):

	Внешний модуль - это модуль, который может быть импортирован и экспортирован 
	из вашего проекта. Внешние модули обычно хранятся в отдельных файлах с 
	расширением .ts или .d.ts и могут быть подключены к вашему проекту с помощью 
	директивы import или export. Внешние модули позволяют разделить ваш код на более 
	мелкие компоненты, которые могут быть использованы и объединены вместе в 
	различных проектах.
`
	},

	"n": {
		"ques": "Перечисление (enum)",
		"result": 
`
	В TypeScript перечисления (enums) - это специализированный тип данных, который 
	представляет собой ограниченный список значений. Эти значения не могут быть 
	изменены после определения перечисления и не могут иметь никакого другого типа 
	данных, кроме указанного при определении перечисления.

	Вот пример определения перечисления:

	enum Suit {
	  Clubs,
	  Diamonds,
	  Hearts,
	  Spades
	}

	Здесь мы определяем перечисление с именем Suit, которое содержит четыре 
	значения: Clubs, Diamonds, Hearts и Spades. Мы можем использовать эти значения 
	в коде, например:

	let card = Card.fromFaceValue(10);
	card.suit = Suit.Hearts;
	console.log(card.getFaceValue() + " of " + card.suit);
`
	},

	"ni": {
		"ques": "NoImplicitAny",
		"result": 
`
	NoImplicitAny используется в TypeScript для предотвращения неявного 
	приведения любых значений к типу any(нужно обязательно указывать тип). Это позволяет обеспечить более 
	строгий контроль типов и избежать неожиданного поведения, связанного с 
	приведением значений к any. Кроме того, это помогает выявлять ошибки 
	на этапе компиляции и улучшать качество кода.
`
	},

	"v": {
		"ques": "“Объединение” (|) и “Пересечение” (&) typescript",
		"result": 
`
	Разница между объединением (union) и пересечением (intersection) типов 
	в TypeScript состоит в следующем:


	-Объединение представляет собой тип, который может иметь одно из нескольких 
	возможных значений.	Например, тип string | number может быть как строкой, так и числом.

	-Пересечение представляет собой тип, который должен иметь все свойства 
	указанных типов.

		interface Camera {
	    takePicture(): void;
		}

		interface MobilePhone {
		    makeCall(): void;
		}

		const phoneWithCamera: Camera & MobilePhone = {
		    takePicture: () => {},
		    makeCall: () => {}
		};
`
	},

	"g": {
		"ques": "Generic",
		"result": 
`
	Общие типы (generic) в TypeScript позволяют создавать классы, интерфейсы, функции и т.д., 
	которые могут работать с различными типами данных без необходимости их явного указания. 
	Это позволяет использовать один и тот же код для работы с разными типами данных, что может 
	упростить код и улучшить его производительность.

	Например, можно создать общий класс Animal без указания конкретного типа животного:

	class Animal<T> {
		name: T;

		constructor(name: T) {
		this.name = name;
	}
		speak() {
			console.log(Animal name is: @{this.name});
		}
	}

	let dog = new Animal<string>(“Dog”);
	dog.speak(); // Outputs: “Animal name is: Dog”

`
	},

	"l": {
		"ques": "Какие области видимости доступны в TypeScript",
		"result": 
`
	В TypeScript доступны следующие области видимости:

	-Глобальная область видимости (Global Scope)

	-Локальная область видимости функции (Function Local Scope)

	-Область видимости модуля (Module Scope)

	-Частная область видимости класса (Class Private Scope)

	-Каждая из этих областей видимости имеет свои особенности и правила 
	 видимости для переменных и функций.

`
	},

	"x": {
		"ques": "Что такое .map файл, как и зачем его использовать",
		"result": 
`
	map файл - это файл, который содержит информацию о том, как исходный код 
	TypeScript был преобразован в JavaScript. Он содержит информацию о типах, 
	именах переменных и функциях, а также о других элементах исходного кода.

	.map файлы используются для отладки TypeScript кода в инструментах разработчика, 
	таких как Visual Studio Code или WebStorm. Они позволяют видеть исходные имена 
	переменных и функций в JavaScript коде, что облегчает отладку и понимание кода.

	Использование .map файлов также может помочь улучшить производительность 
	JavaScript кода, так как они позволяют избежать лишних преобразований имен 
	переменных и функций при компиляции TypeScript кода.
`
	},

	"j": {
		"ques": "Можно ли использовать TypeScript в серверной разработке",
		"result": 
`
	Да, TypeScript можно использовать в серверной разработке. Он широко 
	используется в Node.js для создания серверных приложений. TypeScript 
	позволяет добавлять статическую типизацию к JavaScript-коду, что улучшает
	его читаемость и помогает обнаруживать ошибки на ранних стадиях разработки.
`
	},

	"y": {
		"ques": "Ключевое слово declare",
		"result": 
`
	Ключевое слово declare используется в TypeScript для того, чтобы указать, что 
	некоторый элемент существует, даже если его ещё не существует в коде. Это может
	быть полезным при определении интерфейсов или типов, которые будут реализованы 
	или заполнены позже.
`
	},

	"4": {
		"ques": "Разница между типами void, never и unknown",
		"result": 
`
	-Типы void, never, and unknown в TypeScript имеют следующие различия:

	-Тип void указывает на то, что функция или метод не возвращает значение.

	-Тип never обозначает значение, которое не может возникнуть в 
	результате выполнения программы.

	-Тип unknown используется для обозначения значений неизвестного типа. 
	 Он позволяет обрабатывать такие значения безопасным способом, не вызывая ошибок типа.
`
	},

	"u": {
		"ques": "Как вы отлавливаете ошибки в TypeScript коде",
		"result": 
`
	В TypeScript есть несколько способов отлова ошибок в коде:

	-Использование строгой типизации: TypeScript позволяет определить типы для переменных 
	и параметров функций, что помогает обнаруживать ошибки, связанные с несовместимостью типов.

	-Обработка ошибок с помощью операторов try/catch: Этот подход позволяет перехватывать ошибки 
	времени выполнения и обрабатывать их соответствующим образом.

	-Применение аннотаций @ts-ignore и @ts-expect-error: Эти аннотации позволяют временно подавить 
	или явно указать на наличие ошибки в коде соответственно.

	-Использование инструментария для линтинга кода, такого как tslint или eslint, которые могут 
	обнаруживать различные виды ошибок в коде и выдавать предупреждения.
`
	},
}

export { type_script }